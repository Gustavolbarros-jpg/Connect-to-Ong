name: CI - Test and Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      # === DEPENDÊNCIAS ===
      - name: 📦 Install Root Dependencies
        run: npm ci

      - name: 📦 Install Backend Dependencies
        run: npm ci --prefix backend

      - name: 📦 Install Frontend Dependencies
        run: npm ci --prefix frontend

      # === VALIDAÇÃO E TESTES ===
      - name: 🔎 Validate Prisma Schema
        # CORREÇÃO: Executa o prisma a partir do workspace do backend
        run: npm exec --prefix backend -- prisma validate --schema=./backend/prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: 🧪 Run Backend Tests (Jest)
        # NOVO: Adiciona a etapa de teste do backend
        run: npm run test:back
        env:
          # Adicione as variáveis de ambiente que seus testes precisam
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: 🧪 Run Frontend Tests (Jest/Vitest)
        # NOVO: Adiciona a etapa de teste do frontend
        run: npm run test:front

      # === BUILD ===
      - name: 🏗️ Build Frontend Application
        run: npm run build --prefix frontend
        env:
          # Exemplo de variável de ambiente para o build
          VITE_BASE_URL: /

      # === DOCKER BUILD ===
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Backend Docker Image
        run: docker build --file backend/Dockerfile -t connect-ong-backend:ci .

      - name: 🐳 Build Frontend Docker Image
        run: docker build --file frontend/Dockerfile -t connect-ong-frontend:ci .

      # === VALIDAÇÃO DO DOCKER COMPOSE ===
      - name: 📝 Create .env file for Compose
        # CORREÇÃO: Cria o arquivo .env, não .env.backend
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}" >> .env
          echo "AUTH_EMAIL=${{ secrets.AUTH_EMAIL }}" >> .env
          echo "AUTH_PASS=${{ secrets.AUTH_PASS }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3007" >> .env
          echo "APP_URL=http://localhost:8087" >> .env

      - name: 🧩 Validate Docker Compose Configuration
        run: docker compose -f docker-compose.yml config

      - name: 🎉 Success notification
        run: echo "🎉 CI Pipeline finished successfully!"