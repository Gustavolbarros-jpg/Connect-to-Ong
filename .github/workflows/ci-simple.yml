name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      # === DEPENDÊNCIAS ===
      - name: 📦 Install backend dependencies
        run: npm ci --prefix backend --no-audit --no-fund

      - name: 📦 Install frontend dependencies
        run: npm ci --prefix frontend --no-audit --no-fund

      # === PRISMA (usa prisma da RAIZ) ===
      - name: 🔎 Validate Prisma schema
        run: npx prisma validate --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: 🔧 Generate Prisma Client
        run: npx prisma generate --schema=./prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # === BUILD FRONTEND ===
      - name: 🏗️ Build frontend
        run: npm run build --prefix frontend
        env:
          # Define a URL da API para o ambiente de CI/teste
          VITE_BASE_URL: http://localhost:5000

      # === CHECKS RÁPIDOS ===
      - name: 🧪 Sanity checks
        run: |
          echo "✅ Backend deps instaladas"
          echo "✅ Frontend build concluído"
          echo "✅ Prisma Client gerado"

      # === DOCKER BUILD ===
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Docker build (backend)
        # O contexto '.' é a raiz do projeto, exatamente como no seu docker-compose.yml
        run: docker build --context . --file backend/Dockerfile -t connect-ong-backend:ci

      - name: 🐳 Docker build (frontend)
        # O contexto '.' é a raiz do projeto, exatamente como no seu docker-compose.yml
        run: docker build --context . --file frontend/Dockerfile -t connect-ong-frontend:ci

      # === DOCKER COMPOSE VALIDATION ===
      - name: 📝 Create .env.backend file
        run: |
          # --- Variáveis que vêm dos Secrets do GitHub ---
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.backend
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.backend
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.backend
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.backend
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.backend
          echo "BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}" >> .env.backend
          echo "AUTH_EMAIL=${{ secrets.AUTH_EMAIL }}" >> .env.backend
          echo "AUTH_PASS=${{ secrets.AUTH_PASS }}" >> .env.backend

          # --- Variáveis de configuração (valores fixos para CI) ---
          echo "NODE_ENV=test" >> .env.backend
          echo "PORT=3007" >> .env.backend # Usando a mesma porta do seu docker-compose
          echo "APP_URL=http://localhost:8087" >> .env.backend # Apontando para o frontend

      - name: 🧩 docker compose config
        run: docker compose -f docker-compose.yml config

      - name: 🎉 Success notification
        run: |
          echo "🎉 All checks passed!"
          echo "Ready for deployment!"
